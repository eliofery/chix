package main

func main() {
    // 1. Определение основных зависимостей микросервиса.
    // Первым делом необходимо инициализировать все основные зависимости.
    // Они будут использоваться в различных местах микросервиса.

	// Отображение окружения.
	// При запуске сервера первый лог будет о типе окружения.
	// От типа окружения зависит подгружаемый конфигурационный файл и настройки логов.
	// Для выбора окружения нужно запустить микросервис с параметром local или prod.
	// Пример: go run main.go local или go run main.go prod
	utils.PrintEnv(log.InitLog())

	// Инициализация конфигурации.
	// Реализация конфигурации доступна в двух вариантах:
	// viperr и godotenv.
	// Пример: viperr.New(env) или godotenv.New(env)
	conf := config.MustInit(viperr.New(utils.GetEnv()))

	// Инициализация базы данных.
	// Реализация базы данных доступна в двух вариантах:
	// postgres и sqlite.
	// Пример: postgres.New(conf) или sqlite.New(conf)
	db := database.MustConnect(postgres.New(conf))

	// Инициализация менеджера JWT токенов.
	tokenManager := jwt.NewTokenManager(conf)

	// Инициализация валидатора.
	// Для валидации используется библиотека go-playground/validator.v10.
	// После инициализации валидации можно ее дополнительно настроить.
	valid := chix.NewValidate(validator.New()).
		// В структуре валидируемых данных можно указать метку для полей.
		// Данное будет хранить человекопонятное имя поле.
		// Пример: вместо FirstName -> Имя, LastName -> Фамилия.
		// По умолчанию используется название метки "name", но в случае необходимости его можно переопределить.
		// Пример:
		// type UserSignUp struct {
		//    FirstName string `json:"first_name" label:"Имя"`
		//    LastName  string `json:"last_name"  label:"Фамилия"`
		// }
		// Теперь при ошибки валидации будет выведено сообщение:
		// "Имя обязательное поле", вместо "FirstName обязательное поле".
		RegisterTagName("label").
		// Регистрация используемых языков.
		// При валидации данных используется русский язык по умолчанию.
		// При необходимости можно использовать другие языки.
		// Первый язык в порядке очереди будет зарегистрирован как основной, остальные будут дополнительными.
		// Так же на ряду с используемыми языками нужно регистрировать переводы (см. ниже).
		RegisterLocales(
			ru.New(),
			en.New(),
			fr.New(),
		).
		// Регистрация переводов.
		// Здесь порядок следования переводов не важен.
		// Если нужный перевод в процессе валидации не будет найден, то будет использован перевод по умолчанию (русский язык).
		// Основное сообщение и его перевод валидатор переводит самостоятельно кроме имени тега (по умолчанию "name").
		// Чтобы это исправить нужно изменить значение метки в структуре валидируемых данных.
		// Пример:
		// type UserSignUp struct {
		//    FirstName string `json:"first_name" label:"ru:Имя;en:Name;fr:Nom"`
		//    LastName  string `json:"last_name"  label:"ru:Фамилия;en:Surname;fr:Nom de famille"`
		// }
        // Теперь при ошибке валидации будет выведено сообщение согласно необходимому переводу.
        // По умолчанию язык локали берется из шапки запроса: Accept-Language.
        // Так же можно вручную определять нужный язык локали, будет рассмотрено в дальнейшем.
		RegisterTranslations(chix.DefaultTranslations{
			"ru": ru_translations.RegisterDefaultTranslations,
			"en": en_translations.RegisterDefaultTranslations,
			"fr": fr_translations.RegisterDefaultTranslations,
		}).
        // Регистрация пользовательских валидаторов.
        // Валидатор используемый в Chix уже предоставляет множество различных валидаций:
        // https://github.com/go-playground/validator/?tab=readme-ov-file#fields
        // При необходимости можно регистрировать пользовательские валидаторы.
        // Пример реализации будет рассмотрен в дальнейшем.
		RegisterValidations(
			validation.TestValidate(),
			validation.FooValidate(),
            validation.BarValidate(),
		)


    // 2. Определение бизнес логики микросервиса.
    // После инициализации основных зависимостей микросервиса необходимо настроить саму бизнес логику.

    // Инициализация репозитория.
    // Репозитории хранят обращения к базе данных.
	dao := repository.NewDAO(db.Conn)

    // Инициализация сервис-контроллера.
    // Представляет собой хранилище обработчиков маршрутов.
    // Именно он обращается к сервисам хранящим бизнес логику.
	handler := controller.NewServiceController(
        // Инициализация сервисов.
        // Сервисы описывают бизнес логику.
		service.NewAuthService(dao, tokenManager),
		service.NewUserService(dao),
	)
    // Инициализация маршрутизатора.
    // Маршрутизатор описывает api по которым микросервис принимает и обрабатывает запросы от пользователей.
	routes := route.NewRouter(handler)


    // 3. Запуск микросервиса.
    // Заключительным этапом работы микросервиса является объединение все в общую структуру.

    // Инициализация Chix микросервиса.
	chix.NewApp(db, conf).
        // Использования расширений дополняющих Chix.
        // На данный момент доступна только валидация.
        // Если ее не указать, то входящие данные от пользователей не будут валидироваться.
		UseExtends(valid).
        // Использование middlewares.
        // Middlewares обеспечивает промежуточные проверки, настройки микросервиса до того как
        // основной запрос пользователя дойдет до обрабатывающего его контроллера.
        // В случае если какой-либо промежуточный middleware вернет ошибку, то
        // обработка запроса от пользователя прервется.
		UseMiddlewares(
            // Chix предоставляет два самых важных middlewares.
            // Поддержку межсайтового взаимодействия CORS.
			middleware.Cors(conf),
            // Идентификация пользователя по токену.
            // А так же права доступа к микросервису.
			middleware.SetUserIdFromToken(dao, tokenManager),
            // Пример реализации middleware.
            // Пустая болванка, хранящая самое основное.
			middleware.Example(),
		).
        // Использование маршрутов.
        // Здесь мы определяем какие маршруты будут использованы в микросервисе.
		UseRoutes(
			routes.ErrorRoute,
			routes.AuthRoute,
			routes.UserRoute,
		).
        // Запуск микросервиса.
        // Автоматически происходит миграция базы данных.
        // Поднимается веб сервер на заданном домене и порте.
		MustRun()
}
